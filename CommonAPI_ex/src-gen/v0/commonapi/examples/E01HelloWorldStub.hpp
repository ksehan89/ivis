/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_EXAMPLES_E01_Hello_World_STUB_HPP_
#define V0_COMMONAPI_EXAMPLES_E01_Hello_World_STUB_HPP_

#include <functional>
#include <sstream>




#include <v0/commonapi/examples/E01HelloWorld.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <mutex>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace commonapi {
namespace examples {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service E01HelloWorld. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class E01HelloWorldStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual E01HelloWorld {
 public:
    ///Notifies all remote listeners about a change of value of the attribute x.
    virtual void fireXAttributeChanged(const int32_t& x) = 0;

    /**
    * Sends a broadcast event for myStatus. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireMyStatusEvent(const int32_t &_myCurrentValue, const ::v0::commonapi::examples::E01HelloWorld::stdErrorTypeEnum &_Value2) = 0;


    virtual void deactivateManagedInstances() = 0;

    void lockXAttribute(bool _lockAccess) {
        if (_lockAccess) {
            xMutex_.lock();
        } else {
            xMutex_.unlock();
        }
    }

protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

    std::recursive_mutex xMutex_;
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for E01HelloWorld.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class E01HelloWorldStubRemoteEvent
{
public:
    virtual ~E01HelloWorldStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute x
    virtual bool onRemoteSetXAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value) = 0;
    /// Action callback for remote set requests on the attribute x
    virtual void onRemoteXAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service E01HelloWorld to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class E01HelloWorldStub
    : public virtual CommonAPI::Stub<E01HelloWorldStubAdapter, E01HelloWorldStubRemoteEvent>
{
public:
    typedef std::function<void (std::string _message)>sayHelloReply_t;

    virtual ~E01HelloWorldStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }

    /// Provides getter access to the attribute x
    virtual const int32_t &getXAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireXAttributeChanged(int32_t _value) {
    auto stubAdapter = CommonAPI::Stub<E01HelloWorldStubAdapter, E01HelloWorldStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireXAttributeChanged(_value);
    }
    void lockXAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<E01HelloWorldStubAdapter, E01HelloWorldStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockXAttribute(_lockAccess);
    }

    /// This is the method that will be called on remote calls on the method sayHello.
    virtual void sayHello(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name, sayHelloReply_t _reply) = 0;
    /// Sends a broadcast event for myStatus.
    virtual void fireMyStatusEvent(const int32_t &_myCurrentValue, const ::v0::commonapi::examples::E01HelloWorld::stdErrorTypeEnum &_Value2) {
        auto stubAdapter = CommonAPI::Stub<E01HelloWorldStubAdapter, E01HelloWorldStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireMyStatusEvent(_myCurrentValue, _Value2);
    }

    
    using CommonAPI::Stub<E01HelloWorldStubAdapter, E01HelloWorldStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<E01HelloWorldStubAdapter, E01HelloWorldStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<E01HelloWorldStubAdapter, E01HelloWorldStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef E01HelloWorldStubRemoteEvent RemoteEventType;
    typedef E01HelloWorld StubInterface;
};

} // namespace examples
} // namespace commonapi
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COMMONAPI_EXAMPLES_E01_Hello_World_STUB_HPP_
