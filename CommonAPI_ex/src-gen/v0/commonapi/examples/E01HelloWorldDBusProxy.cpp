/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201907221221.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v0/commonapi/examples/E01HelloWorldDBusProxy.hpp>

namespace v0 {
namespace commonapi {
namespace examples {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createE01HelloWorldDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
    return std::make_shared< E01HelloWorldDBusProxy>(_address, _connection);
}

void initializeE01HelloWorldDBusProxy() {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
        E01HelloWorld::getInterface(),
        &createE01HelloWorldDBusProxy);
}

INITIALIZER(registerE01HelloWorldDBusProxy) {
    CommonAPI::DBus::Factory::get()->registerInterface(initializeE01HelloWorldDBusProxy);
}

E01HelloWorldDBusProxy::E01HelloWorldDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
    :   CommonAPI::DBus::DBusProxy(_address, _connection)
,        x_(*this, "onXAttributeChanged", "setXAttribute", "i", "getXAttribute", static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr))
,        myStatus_(*this, "myStatus", "ii", std::make_tuple(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr), static_cast< CommonAPI::EmptyDeployment* >(nullptr)))
{
}

      E01HelloWorldDBusProxy::XAttribute& E01HelloWorldDBusProxy::getXAttribute() {
          return x_;
      }

E01HelloWorldDBusProxy::MyStatusEvent& E01HelloWorldDBusProxy::getMyStatusEvent() {
    return myStatus_;
}

    void E01HelloWorldDBusProxy::sayHello(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_message, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_message(static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< std::string,CommonAPI::DBus::StringDeployment>
            >
            >::callMethodWithReply(
        *this,
        "sayHello",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_name,
_internalCallStatus,
deploy_message);
_message = deploy_message.getValue();
}
    std::future<CommonAPI::CallStatus> E01HelloWorldDBusProxy::sayHelloAsync(const std::string &_name, SayHelloAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_name(_name, static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment> deploy_message(static_cast< CommonAPI::DBus::StringDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< std::string,CommonAPI::DBus::StringDeployment>
            >
            >::callMethodAsync(
        *this,
        "sayHello",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_name,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::DBus::StringDeployment > _message) {
            if (_callback)
                _callback(_internalCallStatus, _message.getValue());
        },
        std::make_tuple(deploy_message));
    }


void E01HelloWorldDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace examples
      } // namespace commonapi
      } // namespace v0
