/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/proj/testcode/Test_CodeStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace proj {
namespace testcode {

Test_CodeStubDefault::Test_CodeStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(Test_Code::getInterfaceVersion()) {
}

const CommonAPI::Version& Test_CodeStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

Test_CodeStubRemoteEvent* Test_CodeStubDefault::initStubAdapter(const std::shared_ptr< Test_CodeStubAdapter> &_adapter) {
    CommonAPI::Stub<Test_CodeStubAdapter, Test_CodeStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

 const ::v1::proj::testcode::Test_Code::SpeedType& Test_CodeStubDefault::getSpeedTypeAttribute() {
     return speedTypeAttributeValue_;
 }

 const ::v1::proj::testcode::Test_Code::SpeedType& Test_CodeStubDefault::getSpeedTypeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getSpeedTypeAttribute();
 }

 void Test_CodeStubDefault::setSpeedTypeAttribute(::v1::proj::testcode::Test_Code::SpeedType _value) {
     std::shared_ptr<Test_CodeStubAdapter> stubAdapter = CommonAPI::Stub<Test_CodeStubAdapter,
     Test_CodeStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockSpeedTypeAttribute(true);
         const bool valueChanged = (speedTypeAttributeValue_ != _value);
         if (valueChanged) {
             speedTypeAttributeValue_ = std::move(_value);
             fireSpeedTypeAttributeChanged(speedTypeAttributeValue_);
         }
         stubAdapter->lockSpeedTypeAttribute(false);
     } else {
         const bool valueChanged = trySetSpeedTypeAttribute(std::move(_value));
         if (valueChanged) {
             fireSpeedTypeAttributeChanged(speedTypeAttributeValue_);
         }
     }
}

 bool Test_CodeStubDefault::trySetSpeedTypeAttribute(::v1::proj::testcode::Test_Code::SpeedType _value) {
     if (!validateSpeedTypeAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<Test_CodeStubAdapter> stubAdapter = CommonAPI::Stub<Test_CodeStubAdapter, Test_CodeStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockSpeedTypeAttribute(true);
         valueChanged = (speedTypeAttributeValue_ != _value);
         speedTypeAttributeValue_ = std::move(_value);
         stubAdapter->lockSpeedTypeAttribute(false);
     } else {
         valueChanged = (speedTypeAttributeValue_ != _value);
         speedTypeAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool Test_CodeStubDefault::validateSpeedTypeAttributeRequestedValue(const ::v1::proj::testcode::Test_Code::SpeedType &_value) {
     (void)_value;
     return _value.validate();
 }


 const int32_t& Test_CodeStubDefault::getSpeedValueAttribute() {
     return speedValueAttributeValue_;
 }

 const int32_t& Test_CodeStubDefault::getSpeedValueAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getSpeedValueAttribute();
 }

 void Test_CodeStubDefault::setSpeedValueAttribute(int32_t _value) {
     std::shared_ptr<Test_CodeStubAdapter> stubAdapter = CommonAPI::Stub<Test_CodeStubAdapter,
     Test_CodeStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockSpeedValueAttribute(true);
         const bool valueChanged = (speedValueAttributeValue_ != _value);
         if (valueChanged) {
             speedValueAttributeValue_ = std::move(_value);
             fireSpeedValueAttributeChanged(speedValueAttributeValue_);
         }
         stubAdapter->lockSpeedValueAttribute(false);
     } else {
         const bool valueChanged = trySetSpeedValueAttribute(std::move(_value));
         if (valueChanged) {
             fireSpeedValueAttributeChanged(speedValueAttributeValue_);
         }
     }
}

 bool Test_CodeStubDefault::trySetSpeedValueAttribute(int32_t _value) {
     if (!validateSpeedValueAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<Test_CodeStubAdapter> stubAdapter = CommonAPI::Stub<Test_CodeStubAdapter, Test_CodeStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockSpeedValueAttribute(true);
         valueChanged = (speedValueAttributeValue_ != _value);
         speedValueAttributeValue_ = std::move(_value);
         stubAdapter->lockSpeedValueAttribute(false);
     } else {
         valueChanged = (speedValueAttributeValue_ != _value);
         speedValueAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool Test_CodeStubDefault::validateSpeedValueAttributeRequestedValue(const int32_t &_value) {
     (void)_value;
     return true;
 }



void Test_CodeStubDefault::setSpeedType(const std::shared_ptr<CommonAPI::ClientId> _client, Test_Code::SpeedType _type, setSpeedTypeReply_t _reply) {
    (void)_client;
    (void)_type;
    _reply();
}

void Test_CodeStubDefault::getSpeedType(const std::shared_ptr<CommonAPI::ClientId> _client, getSpeedTypeReply_t _reply) {
    (void)_client;
    Test_Code::SpeedType show = Test_Code::SpeedType::SPEED_KIL;
    if (!show.validate()) {
        return;
    }
    _reply(show);
}

void Test_CodeStubDefault::setSpeedValue(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _show, setSpeedValueReply_t _reply) {
    (void)_client;
    (void)_show;
    _reply();
}

void Test_CodeStubDefault::getSpeedValue(const std::shared_ptr<CommonAPI::ClientId> _client, getSpeedValueReply_t _reply) {
    (void)_client;
    int32_t show = 0;
    _reply(show);
}




Test_CodeStubDefault::RemoteEventHandler::RemoteEventHandler(Test_CodeStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace testcode
} // namespace proj
} // namespace v1
