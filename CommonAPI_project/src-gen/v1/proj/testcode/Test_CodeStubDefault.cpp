/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/proj/testcode/Test_CodeStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace proj {
namespace testcode {

Test_CodeStubDefault::Test_CodeStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(Test_Code::getInterfaceVersion()) {
}

const CommonAPI::Version& Test_CodeStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

Test_CodeStubRemoteEvent* Test_CodeStubDefault::initStubAdapter(const std::shared_ptr< Test_CodeStubAdapter> &_adapter) {
    CommonAPI::Stub<Test_CodeStubAdapter, Test_CodeStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

 const int32_t& Test_CodeStubDefault::getSpeedValueAttribute() {
     return speedValueAttributeValue_;
 }

 const int32_t& Test_CodeStubDefault::getSpeedValueAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getSpeedValueAttribute();
 }

 void Test_CodeStubDefault::setSpeedValueAttribute(int32_t _value) {
     std::shared_ptr<Test_CodeStubAdapter> stubAdapter = CommonAPI::Stub<Test_CodeStubAdapter,
     Test_CodeStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockSpeedValueAttribute(true);
         const bool valueChanged = (speedValueAttributeValue_ != _value);
         if (valueChanged) {
             speedValueAttributeValue_ = std::move(_value);
             fireSpeedValueAttributeChanged(speedValueAttributeValue_);
         }
         stubAdapter->lockSpeedValueAttribute(false);
     } else {
         const bool valueChanged = trySetSpeedValueAttribute(std::move(_value));
         if (valueChanged) {
             fireSpeedValueAttributeChanged(speedValueAttributeValue_);
         }
     }
}

 bool Test_CodeStubDefault::trySetSpeedValueAttribute(int32_t _value) {
     if (!validateSpeedValueAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<Test_CodeStubAdapter> stubAdapter = CommonAPI::Stub<Test_CodeStubAdapter, Test_CodeStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockSpeedValueAttribute(true);
         valueChanged = (speedValueAttributeValue_ != _value);
         speedValueAttributeValue_ = std::move(_value);
         stubAdapter->lockSpeedValueAttribute(false);
     } else {
         valueChanged = (speedValueAttributeValue_ != _value);
         speedValueAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool Test_CodeStubDefault::validateSpeedValueAttributeRequestedValue(const int32_t &_value) {
     (void)_value;
     return true;
 }

 void Test_CodeStubDefault::setSpeedValueAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value) {
     (void)_client;
     setSpeedValueAttribute(_value);
 }

 void Test_CodeStubDefault::onRemoteSpeedValueAttributeChanged() {
     // No operation in default
 }

 void Test_CodeStubDefault::RemoteEventHandler::onRemoteSpeedValueAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteSpeedValueAttributeChanged();
 }

 bool Test_CodeStubDefault::RemoteEventHandler::onRemoteSetSpeedValueAttribute(int32_t _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetSpeedValueAttribute(std::move(_value));
 }

 bool Test_CodeStubDefault::RemoteEventHandler::onRemoteSetSpeedValueAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value) {
     (void)_client;
     return onRemoteSetSpeedValueAttribute(_value);
 }

 const int32_t& Test_CodeStubDefault::getRpmValueAttribute() {
     return rpmValueAttributeValue_;
 }

 const int32_t& Test_CodeStubDefault::getRpmValueAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getRpmValueAttribute();
 }

 void Test_CodeStubDefault::setRpmValueAttribute(int32_t _value) {
     std::shared_ptr<Test_CodeStubAdapter> stubAdapter = CommonAPI::Stub<Test_CodeStubAdapter,
     Test_CodeStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockRpmValueAttribute(true);
         const bool valueChanged = (rpmValueAttributeValue_ != _value);
         if (valueChanged) {
             rpmValueAttributeValue_ = std::move(_value);
             fireRpmValueAttributeChanged(rpmValueAttributeValue_);
         }
         stubAdapter->lockRpmValueAttribute(false);
     } else {
         const bool valueChanged = trySetRpmValueAttribute(std::move(_value));
         if (valueChanged) {
             fireRpmValueAttributeChanged(rpmValueAttributeValue_);
         }
     }
}

 bool Test_CodeStubDefault::trySetRpmValueAttribute(int32_t _value) {
     if (!validateRpmValueAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<Test_CodeStubAdapter> stubAdapter = CommonAPI::Stub<Test_CodeStubAdapter, Test_CodeStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockRpmValueAttribute(true);
         valueChanged = (rpmValueAttributeValue_ != _value);
         rpmValueAttributeValue_ = std::move(_value);
         stubAdapter->lockRpmValueAttribute(false);
     } else {
         valueChanged = (rpmValueAttributeValue_ != _value);
         rpmValueAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool Test_CodeStubDefault::validateRpmValueAttributeRequestedValue(const int32_t &_value) {
     (void)_value;
     return true;
 }

 void Test_CodeStubDefault::setRpmValueAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value) {
     (void)_client;
     setRpmValueAttribute(_value);
 }

 void Test_CodeStubDefault::onRemoteRpmValueAttributeChanged() {
     // No operation in default
 }

 void Test_CodeStubDefault::RemoteEventHandler::onRemoteRpmValueAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteRpmValueAttributeChanged();
 }

 bool Test_CodeStubDefault::RemoteEventHandler::onRemoteSetRpmValueAttribute(int32_t _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetRpmValueAttribute(std::move(_value));
 }

 bool Test_CodeStubDefault::RemoteEventHandler::onRemoteSetRpmValueAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value) {
     (void)_client;
     return onRemoteSetRpmValueAttribute(_value);
 }

 const ::v1::proj::testcode::CommonTypes::a2Struct& Test_CodeStubDefault::getA2Attribute() {
     return a2AttributeValue_;
 }

 const ::v1::proj::testcode::CommonTypes::a2Struct& Test_CodeStubDefault::getA2Attribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getA2Attribute();
 }

 void Test_CodeStubDefault::setA2Attribute(::v1::proj::testcode::CommonTypes::a2Struct _value) {
     std::shared_ptr<Test_CodeStubAdapter> stubAdapter = CommonAPI::Stub<Test_CodeStubAdapter,
     Test_CodeStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockA2Attribute(true);
         const bool valueChanged = (a2AttributeValue_ != _value);
         if (valueChanged) {
             a2AttributeValue_ = std::move(_value);
             fireA2AttributeChanged(a2AttributeValue_);
         }
         stubAdapter->lockA2Attribute(false);
     } else {
         const bool valueChanged = trySetA2Attribute(std::move(_value));
         if (valueChanged) {
             fireA2AttributeChanged(a2AttributeValue_);
         }
     }
}

 bool Test_CodeStubDefault::trySetA2Attribute(::v1::proj::testcode::CommonTypes::a2Struct _value) {
     if (!validateA2AttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<Test_CodeStubAdapter> stubAdapter = CommonAPI::Stub<Test_CodeStubAdapter, Test_CodeStubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockA2Attribute(true);
         valueChanged = (a2AttributeValue_ != _value);
         a2AttributeValue_ = std::move(_value);
         stubAdapter->lockA2Attribute(false);
     } else {
         valueChanged = (a2AttributeValue_ != _value);
         a2AttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool Test_CodeStubDefault::validateA2AttributeRequestedValue(const ::v1::proj::testcode::CommonTypes::a2Struct &_value) {
     (void)_value;
     return true;
 }

 void Test_CodeStubDefault::setA2Attribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::testcode::CommonTypes::a2Struct _value) {
     (void)_client;
     setA2Attribute(_value);
 }

 void Test_CodeStubDefault::onRemoteA2AttributeChanged() {
     // No operation in default
 }

 void Test_CodeStubDefault::RemoteEventHandler::onRemoteA2AttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteA2AttributeChanged();
 }

 bool Test_CodeStubDefault::RemoteEventHandler::onRemoteSetA2Attribute(::v1::proj::testcode::CommonTypes::a2Struct _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetA2Attribute(std::move(_value));
 }

 bool Test_CodeStubDefault::RemoteEventHandler::onRemoteSetA2Attribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::testcode::CommonTypes::a2Struct _value) {
     (void)_client;
     return onRemoteSetA2Attribute(_value);
 }


void Test_CodeStubDefault::num_ex(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _input_num, num_exReply_t _reply) {
    (void)_client;
    (void)_input_num;
    int32_t output_num = 0;
    _reply(output_num);
}




Test_CodeStubDefault::RemoteEventHandler::RemoteEventHandler(Test_CodeStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace testcode
} // namespace proj
} // namespace v1
