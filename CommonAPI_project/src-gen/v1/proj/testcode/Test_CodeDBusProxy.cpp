/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201907221221.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/proj/testcode/Test_CodeDBusProxy.hpp>

namespace v1 {
namespace proj {
namespace testcode {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createTest_CodeDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
    return std::make_shared< Test_CodeDBusProxy>(_address, _connection);
}

void initializeTest_CodeDBusProxy() {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
        Test_Code::getInterface(),
        &createTest_CodeDBusProxy);
}

INITIALIZER(registerTest_CodeDBusProxy) {
    CommonAPI::DBus::Factory::get()->registerInterface(initializeTest_CodeDBusProxy);
}

Test_CodeDBusProxy::Test_CodeDBusProxy(
    const CommonAPI::DBus::DBusAddress &_address,
    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
    :   CommonAPI::DBus::DBusProxy(_address, _connection)
,        speedValue_(*this, "onSpeedValueAttributeChanged", "setSpeedValueAttribute", "i", "getSpeedValueAttribute", static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr)),
        rpmValue_(*this, "onRpmValueAttributeChanged", "setRpmValueAttribute", "i", "getRpmValueAttribute", static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr)),
        a2_(*this, "onA2AttributeChanged", "setA2Attribute", "(ibd)", "getA2Attribute", static_cast< ::v1::proj::testcode::CommonTypes_::a2StructDeployment_t* >(nullptr))
{
}

      Test_CodeDBusProxy::SpeedValueAttribute& Test_CodeDBusProxy::getSpeedValueAttribute() {
          return speedValue_;
      }
      Test_CodeDBusProxy::RpmValueAttribute& Test_CodeDBusProxy::getRpmValueAttribute() {
          return rpmValue_;
      }
      Test_CodeDBusProxy::A2Attribute& Test_CodeDBusProxy::getA2Attribute() {
          return a2_;
      }


    void Test_CodeDBusProxy::num_ex(const int32_t &_input_num, CommonAPI::CallStatus &_internalCallStatus, int32_t &_output_num, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_input_num(_input_num, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_output_num(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodWithReply(
        *this,
        "num_ex",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_input_num,
_internalCallStatus,
deploy_output_num);
_output_num = deploy_output_num.getValue();
}
    std::future<CommonAPI::CallStatus> Test_CodeDBusProxy::num_exAsync(const int32_t &_input_num, Num_exAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_input_num(_input_num, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deploy_output_num(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable< int32_t,CommonAPI::DBus::IntegerDeployment>
            >
            >::callMethodAsync(
        *this,
        "num_ex",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_input_num,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment > _output_num) {
            if (_callback)
                _callback(_internalCallStatus, _output_num.getValue());
        },
        std::make_tuple(deploy_output_num));
    }


void Test_CodeDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace testcode
      } // namespace proj
      } // namespace v1
