/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201907221221.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_PROJ_TESTCODE_Test__Code_DBUS_STUB_ADAPTER_HPP_
#define V1_PROJ_TESTCODE_Test__Code_DBUS_STUB_ADAPTER_HPP_

#include <v1/proj/testcode/Test_CodeStub.hpp>
#include "v1/proj/testcode/Test_CodeDBusDeployment.hpp"
#include <v1/proj/testcode/Test_CodeDBusDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace proj {
namespace testcode {

template <typename _Stub = ::v1::proj::testcode::Test_CodeStub, typename... _Stubs>
class Test_CodeDBusStubAdapterInternal
    : public virtual Test_CodeStubAdapter,
      public CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...>
     {
public:
    typedef CommonAPI::DBus::DBusStubAdapterHelper< _Stub, _Stubs...> Test_CodeDBusStubAdapterHelper;

    ~Test_CodeDBusStubAdapterInternal() {
        deactivateManagedInstances();
        Test_CodeDBusStubAdapterHelper::deinit();
    }

    virtual bool hasFreedesktopProperties() {
        return false;
    }

    inline static const char* getInterface() {
        return Test_Code::getInterface();
    }

    void fireSpeedTypeAttributeChanged(const ::v1::proj::testcode::Test_Code::SpeedType& value);

    void fireSpeedValueAttributeChanged(const int32_t& value);

    void deactivateManagedInstances() {
    }

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::proj::testcode::Test_CodeStub,
        CommonAPI::Version
        > getTest_CodeInterfaceVersionStubDispatcher;

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
            ::v1::proj::testcode::Test_CodeStub,
            ::v1::proj::testcode::Test_Code::SpeedType
            > getSpeedTypeAttributeStubDispatcher;

    static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
            ::v1::proj::testcode::Test_CodeStub,
            int32_t,
            CommonAPI::DBus::IntegerDeployment
            > getSpeedValueAttributeStubDispatcher;

    
    static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
        ::v1::proj::testcode::Test_CodeStub,
        std::tuple< Test_Code::SpeedType>,
        std::tuple< >,
        std::tuple< CommonAPI::EmptyDeployment>,
        std::tuple< >
    
        > setSpeedTypeStubDispatcher;

    
    static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
        ::v1::proj::testcode::Test_CodeStub,
        std::tuple< >,
        std::tuple< Test_Code::SpeedType>,
        std::tuple< >,
        std::tuple< CommonAPI::EmptyDeployment>
    
        > getSpeedTypeStubDispatcher;

    
    static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
        ::v1::proj::testcode::Test_CodeStub,
        std::tuple< int32_t>,
        std::tuple< >,
        std::tuple< CommonAPI::DBus::IntegerDeployment>,
        std::tuple< >
    
        > setSpeedValueStubDispatcher;

    
    static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
        ::v1::proj::testcode::Test_CodeStub,
        std::tuple< >,
        std::tuple< int32_t>,
        std::tuple< >,
        std::tuple< CommonAPI::DBus::IntegerDeployment>
    
        > getSpeedValueStubDispatcher;

    Test_CodeDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
    : CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      Test_CodeDBusStubAdapterHelper(_address, _connection, false, _stub) {
        Test_CodeDBusStubAdapterHelper::addStubDispatcher({ "getSpeedTypeAttribute", "" }, &getSpeedTypeAttributeStubDispatcher);
        Test_CodeDBusStubAdapterHelper::addStubDispatcher({ "getSpeedValueAttribute", "" }, &getSpeedValueAttributeStubDispatcher);
        Test_CodeDBusStubAdapterHelper::addStubDispatcher({ "setSpeedType", "i" }, &setSpeedTypeStubDispatcher);
        Test_CodeDBusStubAdapterHelper::addStubDispatcher({ "getSpeedType", "" }, &getSpeedTypeStubDispatcher);
        Test_CodeDBusStubAdapterHelper::addStubDispatcher({ "setSpeedValue", "i" }, &setSpeedValueStubDispatcher);
        Test_CodeDBusStubAdapterHelper::addStubDispatcher({ "getSpeedValue", "" }, &getSpeedValueStubDispatcher);
        Test_CodeDBusStubAdapterHelper::addStubDispatcher({ "getInterfaceVersion", "" }, &getTest_CodeInterfaceVersionStubDispatcher);
    }

protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const {
        static const std::string introspectionData =
            "<method name=\"getInterfaceVersion\">\n"
                "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
            "</method>\n"
            "<method name=\"getSpeedTypeAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
            "</method>\n"
            "<signal name=\"onSpeedTypeAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
            "</signal>\n"
            "<method name=\"getSpeedValueAttribute\">\n"
            "<arg name=\"value\" type=\"i\" direction=\"out\" />"
            "</method>\n"
            "<signal name=\"onSpeedValueAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"i\" />\n"
            "</signal>\n"
            "<method name=\"setSpeedType\">\n"
            "<arg name=\"_type\" type=\"i\" direction=\"in\" />\n"
            "</method>\n"
            "<method name=\"getSpeedType\">\n"
            "<arg name=\"_show\" type=\"i\" direction=\"out\" />\n"
            "</method>\n"
            "<method name=\"setSpeedValue\">\n"
            "<arg name=\"_show\" type=\"i\" direction=\"in\" />\n"
            "</method>\n"
            "<method name=\"getSpeedValue\">\n"
            "<arg name=\"_show\" type=\"i\" direction=\"out\" />\n"
            "</method>\n"
            ;
        return introspectionData.c_str();
    }

private:
};


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
    ::v1::proj::testcode::Test_CodeStub,
    CommonAPI::Version
    > Test_CodeDBusStubAdapterInternal<_Stub, _Stubs...>::getTest_CodeInterfaceVersionStubDispatcher(&Test_CodeStub::lockInterfaceVersionAttribute, &Test_CodeStub::getInterfaceVersion, "uu");

template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::proj::testcode::Test_CodeStub,
        ::v1::proj::testcode::Test_Code::SpeedType
        > Test_CodeDBusStubAdapterInternal<_Stub, _Stubs...>::getSpeedTypeAttributeStubDispatcher(
            &::v1::proj::testcode::Test_CodeStub::lockSpeedTypeAttribute,
            &::v1::proj::testcode::Test_CodeStub::getSpeedTypeAttribute
            , "i"
            );

template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::proj::testcode::Test_CodeStub,
        int32_t,
        CommonAPI::DBus::IntegerDeployment
        > Test_CodeDBusStubAdapterInternal<_Stub, _Stubs...>::getSpeedValueAttributeStubDispatcher(
            &::v1::proj::testcode::Test_CodeStub::lockSpeedValueAttribute,
            &::v1::proj::testcode::Test_CodeStub::getSpeedValueAttribute
            , "i"
            );


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::proj::testcode::Test_CodeStub,
    std::tuple< Test_Code::SpeedType>,
    std::tuple< >,
    std::tuple< CommonAPI::EmptyDeployment>,
    std::tuple< >

    > Test_CodeDBusStubAdapterInternal<_Stub, _Stubs...>::setSpeedTypeStubDispatcher(
    &Test_CodeStub::setSpeedType, "",
    std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
    std::make_tuple());


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::proj::testcode::Test_CodeStub,
    std::tuple< >,
    std::tuple< Test_Code::SpeedType>,
    std::tuple< >,
    std::tuple< CommonAPI::EmptyDeployment>

    > Test_CodeDBusStubAdapterInternal<_Stub, _Stubs...>::getSpeedTypeStubDispatcher(
    &Test_CodeStub::getSpeedType, "i",
    std::make_tuple(),
    std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)));


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::proj::testcode::Test_CodeStub,
    std::tuple< int32_t>,
    std::tuple< >,
    std::tuple< CommonAPI::DBus::IntegerDeployment>,
    std::tuple< >

    > Test_CodeDBusStubAdapterInternal<_Stub, _Stubs...>::setSpeedValueStubDispatcher(
    &Test_CodeStub::setSpeedValue, "",
    std::make_tuple(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr)),
    std::make_tuple());


template <typename _Stub, typename... _Stubs>
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::proj::testcode::Test_CodeStub,
    std::tuple< >,
    std::tuple< int32_t>,
    std::tuple< >,
    std::tuple< CommonAPI::DBus::IntegerDeployment>

    > Test_CodeDBusStubAdapterInternal<_Stub, _Stubs...>::getSpeedValueStubDispatcher(
    &Test_CodeStub::getSpeedValue, "i",
    std::make_tuple(),
    std::make_tuple(static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr)));

template <typename _Stub, typename... _Stubs>
void Test_CodeDBusStubAdapterInternal<_Stub, _Stubs...>::fireSpeedTypeAttributeChanged(const ::v1::proj::testcode::Test_Code::SpeedType& value) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v1::proj::testcode::Test_Code::SpeedType
    >>
        ::sendSignal(
            *this,
            "onSpeedTypeAttributeChanged",
            "i",
            value
    
    );
}

template <typename _Stub, typename... _Stubs>
void Test_CodeDBusStubAdapterInternal<_Stub, _Stubs...>::fireSpeedValueAttributeChanged(const int32_t& value) {
    CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment> deployedValue(value, static_cast< CommonAPI::DBus::IntegerDeployment* >(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        int32_t,
        CommonAPI::DBus::IntegerDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onSpeedValueAttributeChanged",
            "i",
            deployedValue
    
    );
}


template <typename _Stub = ::v1::proj::testcode::Test_CodeStub, typename... _Stubs>
class Test_CodeDBusStubAdapter
    : public Test_CodeDBusStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< Test_CodeDBusStubAdapter<_Stub, _Stubs...>> {
public:
    Test_CodeDBusStubAdapter(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<_Stub> &_stub)
        : CommonAPI::DBus::DBusStubAdapter(
            _address,
            _connection,
            false),
          Test_CodeDBusStubAdapterInternal<_Stub, _Stubs...>(
            _address,
            _connection,
            _stub) {
    }
};

} // namespace testcode
} // namespace proj
} // namespace v1

#endif // V1_PROJ_TESTCODE_Test__Code_DBUS_STUB_ADAPTER_HPP_
