/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_PROJ_TESTCODE_Test__Code_STUB_DEFAULT_HPP_
#define V1_PROJ_TESTCODE_Test__Code_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/proj/testcode/Test_CodeStub.hpp>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace proj {
namespace testcode {

/**
 * Provides a default implementation for Test_CodeStubRemoteEvent and
 * Test_CodeStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT Test_CodeStubDefault
    : public virtual Test_CodeStub {
public:
    COMMONAPI_EXPORT Test_CodeStubDefault();

    COMMONAPI_EXPORT Test_CodeStubRemoteEvent* initStubAdapter(const std::shared_ptr< Test_CodeStubAdapter> &_adapter);

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    COMMONAPI_EXPORT virtual const int32_t& getSpeedValueAttribute();
    COMMONAPI_EXPORT virtual const int32_t& getSpeedValueAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setSpeedValueAttribute(int32_t _value);
    COMMONAPI_EXPORT virtual void setSpeedValueAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value);
    COMMONAPI_EXPORT virtual const int32_t& getRpmValueAttribute();
    COMMONAPI_EXPORT virtual const int32_t& getRpmValueAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setRpmValueAttribute(int32_t _value);
    COMMONAPI_EXPORT virtual void setRpmValueAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value);
    COMMONAPI_EXPORT virtual const ::v1::proj::testcode::CommonTypes::a2Struct& getA2Attribute();
    COMMONAPI_EXPORT virtual const ::v1::proj::testcode::CommonTypes::a2Struct& getA2Attribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    COMMONAPI_EXPORT virtual void setA2Attribute(::v1::proj::testcode::CommonTypes::a2Struct _value);
    COMMONAPI_EXPORT virtual void setA2Attribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::testcode::CommonTypes::a2Struct _value);

    COMMONAPI_EXPORT virtual void num_ex(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _input_num, num_exReply_t _reply);


    
protected:
    COMMONAPI_EXPORT virtual bool trySetSpeedValueAttribute(int32_t _value);
    COMMONAPI_EXPORT virtual bool validateSpeedValueAttributeRequestedValue(const int32_t &_value);
    COMMONAPI_EXPORT virtual void onRemoteSpeedValueAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetRpmValueAttribute(int32_t _value);
    COMMONAPI_EXPORT virtual bool validateRpmValueAttributeRequestedValue(const int32_t &_value);
    COMMONAPI_EXPORT virtual void onRemoteRpmValueAttributeChanged();
    COMMONAPI_EXPORT virtual bool trySetA2Attribute(::v1::proj::testcode::CommonTypes::a2Struct _value);
    COMMONAPI_EXPORT virtual bool validateA2AttributeRequestedValue(const ::v1::proj::testcode::CommonTypes::a2Struct &_value);
    COMMONAPI_EXPORT virtual void onRemoteA2AttributeChanged();
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual Test_CodeStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(Test_CodeStubDefault *_defaultStub);

        COMMONAPI_EXPORT virtual bool onRemoteSetSpeedValueAttribute(int32_t _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetSpeedValueAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value);
        COMMONAPI_EXPORT virtual void onRemoteSpeedValueAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetRpmValueAttribute(int32_t _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetRpmValueAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value);
        COMMONAPI_EXPORT virtual void onRemoteRpmValueAttributeChanged();

        COMMONAPI_EXPORT virtual bool onRemoteSetA2Attribute(::v1::proj::testcode::CommonTypes::a2Struct _value);
        COMMONAPI_EXPORT virtual bool onRemoteSetA2Attribute(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::proj::testcode::CommonTypes::a2Struct _value);
        COMMONAPI_EXPORT virtual void onRemoteA2AttributeChanged();


    private:
        Test_CodeStubDefault *defaultStub_;
    };
protected:
    Test_CodeStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    int32_t speedValueAttributeValue_ {};
    int32_t rpmValueAttributeValue_ {};
    ::v1::proj::testcode::CommonTypes::a2Struct a2AttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace testcode
} // namespace proj
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_PROJ_TESTCODE_Test__Code_STUB_DEFAULT
